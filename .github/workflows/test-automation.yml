name: Channel News Asia Test Automation

on:
  schedule:
    # Run tests daily at 6 AM UTC (2 PM Singapore time)
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - homepage
        - search
        - article
        - mobile
        - breaking-news
      environment:
        description: 'Environment to test'
        required: false
        default: 'production'
        type: choice
        options:
        - production
        - staging
  push:
    branches: [ main ]
    paths:
      - 'tests/**'
      - 'playwright.config.ts'

env:
  TESTHUB_API_URL: ${{ secrets.TESTHUB_API_URL || 'https://your-testhub.vercel.app' }}
  WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}

jobs:
  test-execution:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: [chromium, firefox, webkit]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Create test run in TestHub
      id: create-run
      run: |
        RUN_ID=$(date +%s)-${{ matrix.project }}-${{ github.run_number }}
        echo "RUN_ID=$RUN_ID" >> $GITHUB_OUTPUT
        
        # Create test run via API (will be implemented)
        curl -X POST "$TESTHUB_API_URL/api/runs/dispatch" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.TESTHUB_API_TOKEN }}" \
          -d '{
            "runId": "'$RUN_ID'",
            "projectId": "cna-project",
            "environment": "${{ github.event.inputs.environment || '"'"'production'"'"' }}",
            "browser": "${{ matrix.project }}",
            "trigger": "github-actions",
            "commitSha": "${{ github.sha }}",
            "commitMessage": "${{ github.event.head_commit.message }}",
            "workflowUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }' || echo "Failed to create test run - continuing with local execution"

    - name: Run Playwright tests
      env:
        TEST_RUN_ID: ${{ steps.create-run.outputs.RUN_ID }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        # Determine which tests to run
        TEST_PATTERN="tests/channelnewsasia"
        case "${{ github.event.inputs.test_suite }}" in
          "homepage") TEST_PATTERN="tests/channelnewsasia/homepage-navigation.spec.ts" ;;
          "search") TEST_PATTERN="tests/channelnewsasia/search-functionality.spec.ts" ;;
          "article") TEST_PATTERN="tests/channelnewsasia/article-reading.spec.ts" ;;
          "mobile") TEST_PATTERN="tests/channelnewsasia/mobile-responsive.spec.ts" ;;
          "breaking-news") TEST_PATTERN="tests/channelnewsasia/breaking-news.spec.ts" ;;
        esac
        
        # Run tests with reporting
        npx playwright test $TEST_PATTERN \
          --project=${{ matrix.project }} \
          --reporter=html,json \
          --output-dir=test-results/${{ matrix.project }} \
          || TEST_EXIT_CODE=$?
        
        echo "TEST_EXIT_CODE=${TEST_EXIT_CODE:-0}" >> $GITHUB_ENV

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.project }}
        path: |
          test-results/
          playwright-report/
        retention-days: 7

    - name: Parse test results and report to TestHub
      if: always()
      run: |
        # Parse JSON results and send to TestHub API
        if [ -f "test-results.json" ]; then
          node .github/scripts/report-results.js \
            --results-file test-results.json \
            --run-id ${{ steps.create-run.outputs.RUN_ID }} \
            --project ${{ matrix.project }} \
            --api-url $TESTHUB_API_URL \
            --webhook-secret $WEBHOOK_SECRET
        fi

    - name: Comment on PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read test results and create summary
          let summary = `## 🧪 Test Results for ${{ matrix.project }}\n\n`;
          
          if (process.env.TEST_EXIT_CODE === '0') {
            summary += `✅ All tests passed!\n`;
          } else {
            summary += `❌ Some tests failed. Check the [full report](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.\n`;
          }
          
          summary += `\n📊 [View detailed report](${context.payload.repository.html_url}/actions/runs/${context.runId})\n`;
          summary += `🔗 [TestHub Dashboard](${process.env.TESTHUB_API_URL})\n`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  test-summary:
    needs: test-execution
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      
    - name: Create test summary
      run: |
        echo "## 🧪 Channel News Asia Test Automation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Test Run:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count results from each browser
        for browser in chromium firefox webkit; do
          if [ -d "test-results-$browser" ]; then
            echo "### $browser Results" >> $GITHUB_STEP_SUMMARY
            echo "✅ Test artifacts uploaded" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "🔗 [View TestHub Dashboard](${{ env.TESTHUB_API_URL }})" >> $GITHUB_STEP_SUMMARY

  notify-webhook:
    needs: [test-execution]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Send results to TestHub webhook
      run: |
        # Determine overall status
        OVERALL_STATUS="completed"
        if [[ "${{ needs.test-execution.result }}" == "failure" ]]; then
          OVERALL_STATUS="failed"
        fi
        
        # Send webhook notification to TestHub
        curl -X POST "$TESTHUB_API_URL/api/webhooks/github" \
          -H "Content-Type: application/json" \
          -H "X-Hub-Signature-256: sha256=$(echo -n '${{ toJson(github) }}' | openssl dgst -sha256 -hmac '$WEBHOOK_SECRET' | cut -d' ' -f2)" \
          -d '{
            "action": "completed",
            "workflow_run": {
              "id": ${{ github.run_id }},
              "status": "completed",
              "conclusion": "'$OVERALL_STATUS'",
              "html_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "head_commit": {
                "id": "${{ github.sha }}",
                "message": "${{ github.event.head_commit.message }}"
              }
            },
            "repository": {
              "full_name": "${{ github.repository }}"
            }
          }' || echo "Webhook notification failed - TestHub may not be available"